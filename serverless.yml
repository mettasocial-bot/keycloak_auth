service: mettasocial-auth-handlers
app: mettasocial-auth-handlers
provider:
  name: aws
  runtime: nodejs12.x
  deploymentBucket:
    name: mettasocial.serverless.deploys
    maxPreviousDeploymentArtifacts: 20
  apiName: mettasocial-auth-handlers
  stackName: mettasocial-auth-handlers
  memorySize: 512
  timeout: 10
  stage: prod
  region: us-east-1
  environment:
    KEYCLOAK_ADMIN_USERNAME: ${env:KEYCLOAK_ADMIN_USERNAME}
    KEYCLOAK_ADMIN_PASSWORD: ${env:KEYCLOAK_ADMIN_PASSWORD}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**
package:
  individually: true

functions:
  signup:
    handler: serverless-functions/signup.index
    events:
      - http: 
          path: signup
          method: post
  logout:
    handler: serverless-functions/logout.index
    events:
      - http: 
          path: logout
          method: get
  authorize:
    handler: serverless-functions/authorize.index
    events:
      - http: 
          path: authorize
          method: get
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
plugins:
  - serverless-ignore
  - serverless-plugin-include-dependencies
  - serverless-bundle
  - serverless-api-gateway-throttling
  - serverless-offline

usagePlan: # Optional usage plan configuration
  quota:
    limit: 5000
    offset: 2
    period: MONTH
  throttle:
    burstLimit: 200
    rateLimit: 100

custom:
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002
    printOutput: true
    useWorkerThreads: true
    useChildProcesses: true
  apiGatewayThrottling:
    maxRequestsPerSecond: 100
    maxConcurrentRequests: 50